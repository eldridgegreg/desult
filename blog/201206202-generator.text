# Blog Generation - THE WHOLE TRUTH
### Wednesday, June 20th, 2012 - Late Afternoon

Well, I've finished my second project on this site!  Hurray!  My blog is now generated entirely by a simple utility that I can run locally on [Markdown](http://daringfireball.net/projects/markdown/) files.  Look ma, no database!

You can see generator.py [here](https://github.com/eldridgegreg/desult/tree/master/blog) along with all the other inputs and outputs.  It's pretty basic at the moment, but I will probably go through and polish it up as time permits.  The obvious question is of course, why do this?  There are a bazillion blog software suites out there, and they're all vastly more robust and powerful than my little tool.

Well, first and foremost, because I want to keep up my coding skills.  I don't have a heck of a lot of opportunity to code in my current job of late, and what opportunity I do have is strongly discouraged.  I find little projects like this a blast to learn new tricks and explore areas that I haven't worked in before... even if the space is pretty well populated by better solutions.

Secondly, I wanted to be able to compose blog posts relatively independently of the site itself.  With this approach, I can write my blog posts offline, on just about any computer in existence.  All I need is a text editor and some way to send that text file to github.  When I'm ready to publish, I simply run my script, and commit to github.  Right now, I still have to manually pull the repo on my web host, but it is relatively trivial to automate that with various tools.

Thirdly, I find the vast majority of blogging software WAAAAAY, WAAAAY overkill for one person's self hosted blog.  Wordpress is great - but it comes with a lot of cruft I don't need (including a database).  My content is basically Write Once, Read Many.  Many might be overstating it... but I certainly won't be editing my posts a month from now, let alone a year from now.  Some simple pre-generation and JavaScript can pull out just about any matrix of organization, tagging, or inter-linking that I can think of.  At the end of the day, I love systems that are as simple as possible - they are easier to maintain, less resource demanding, and (generally) easier to use.  I think this is as close to the minimum complexity for this kind of system while still maintaining the basic features offered by the monolithic packages.

Fourthly, it forces me to leverage the amazing ecosystem of new wave integrated utilities.  Facebook comments - insanely simple to integrate, and leverages a vastly more scalable platform than my site is hosted on.  Search - googling with "site:desult.com" - you'll probably get much better results than any homebrewed or borrowed search solution.  I'm sure I'll be pulling other elements from Web 205.0 or whatever it is called these days.  Avoiding the obvious off the shelf, all-in-one solutions encourages me to look around, and pick and choose interesting pieces.

This was inspired by a programming blog that escapes me at the moment.  It is even simpler, and doesn't have any comments.  I'll update this post the next time I stumble across his site.  Prior to that blog, I just assumed that the obvious path to any blog was naturally going to be a dynamically generated, relatively complex project, or alternatively, a maintenance and editing nightmare.  I am quite pleased with how this has turned out.  I may do a more in-depth discussion of design decisions as an exercise in self-flagellation later.